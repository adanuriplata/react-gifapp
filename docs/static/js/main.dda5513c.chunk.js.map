{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC/CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCTnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIjC,OAFAc,QAAQC,IAAI,CAACL,QAAOV,QAGhB,sBAAKgB,UAAU,yCAAf,UACI,uBACA,qBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,4BAAIA,QCLHS,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECFf,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAbAC,qBAAW,WAEP1B,EAASC,GACJ0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,SAIrB,CAACtB,IAGGuB,EDZwBK,CAAc5B,GAAjCa,EAL2B,EAKhCN,KAAae,EALmB,EAKnBA,QAMpB,OAJAN,QAAQC,IAAIK,GAKR,qCACA,oBAAIJ,UAAU,oCAAd,SACMlB,IAGLsB,GAAW,mBAAGJ,UAAU,0BAAb,qBAEhB,qBAAKA,UAAU,YAAf,SAGQL,EAAOJ,KACH,SAAAC,GAAG,OAAM,cAAC,EAAD,eAEJA,GADCA,EAAIC,aEEXkB,EA3BM,WAAO,IAAD,EAEa3C,mBAAU,CAAC,aAFxB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAQvB,OAAS,qCACL,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQS,EAAWe,KAAK,SAACT,GAAD,OACf,cAAC,EAAD,CAECA,SAAWA,GADNA,Y,MCjBvB8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.dda5513c.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value )\n        \n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ) {\n            setCategories( (categories) => [inputValue, ...categories ] );\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=x1cPcyIDBvc9CTjixhjqrngJJsxxTD1x`\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        \n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n        \n    } )\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n\n    console.log({title, url})\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <br/>\n            <img src={ url } alt={ title }/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","// import React, { useState, useEffect } from 'react';\nimport React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n\n\n\n    const {data:images, loading} = useFetchGifs( category );\n\n    console.log(loading)\n\n  \n\n    return ( \n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">\n            { category }\n        </h3>\n\n       { loading && <p className=\"animate__animated flash\">Loading</p> }\n\n    <div className=\"card-grid\">\n        \n        {\n            images.map(\n                img => ( <GifGridItem \n                key={ img.id }\n                { ...img }\n                />\n            ))\n        }\n        \n    </div> \n    </>)\n    \n}","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setstate({\n                    data:imgs,\n                    loading:false\n                })\n            })\n\n    }, [category])\n\n\n    return state; //  { data:[], loading: true };\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState( ['nintendo'] );\n\n    // const handleAdd = () => {\n    //      setCategories( [...categories, 'Puebla fc'] );\n    // }\n\n    return ( <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories}/>\n        <hr/>\n\n\n        <ol>\n            { \n                categories.map( (category) => (\n                 <GifGrid\n                 key={ category }\n                  category={ category } />\n                ) )\n            }\n        </ol>\n    </>\n)\n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}